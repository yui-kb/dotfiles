snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet def "begin,end def" bA
\begin{definition}
	$1
\end{definition}
$0
endsnippet

snippet sect "Section" bA
\\section{$1}
$0
endsnippet

snippet subsect "Subsection" bA
\\subsection{$1}
$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
\] $0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet != "not equal" iA
\\neq 
endsnippet

snippet pdiv "Partial derivative" wA
\\frac{\partial $1}{\partial $2}$0
endsnippet

snippet dint "Definite Integral" wA
\\int_{$1}^{$2}$0
endsnippet

snippet msum "Sum" wA
\\sum_{$1}^{$2}$0
endsnippet

snippet prod "Product" bA
\\prod_{$1}^{$2}$0
endsnippet

snippet hessian "Hessian Matrix" bA
endsnippet

snippet hl "Highlight" wA
\\hl{$1}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
snippet list "Itemized list" bA
\begin{itemize}
	\item $1
\end{itemize}$0
endsnippet

snippet mbf "Math Bold" wA
\\mathbf{$1} $0
endsnippet

snippet mbb "Fancy Words" wA
\\mathbb{$1} $0
endsnippet

global !p
def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

snippet 4all "For all with better spacing" wA
\\: \forall \:
endsnippet

snippet plotfig "Plot Figure" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet dfa_tikz "Tikz for DFA" w
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,on grid,auto]
	\tikzstyle{every state}=[fill={rgb:black,1;white,10}]

	\node[state,initial] $1;

	\path[->]
	$2
\end{tikzpicture}
\end{center}
$0
endsnippet

snippet dfa_dm "Display math for DFA" w
\[
M$1 = \left\\{
	Q=\\{$2\\},
	\Sigma=\\{$3\\},
	\delta=
\left[
pmat$5
\right],
$6,
F=\\{$7\\}
\right\\}
\]
endsnippet

snippet eps "epsilon" wA
\\epsilon_{$1}$0
endsnippet

snippet delt "delta" wA
\\delta_{$1}$0
endsnippet

snippet := "defined" iA
\\coloneqq
endsnippet

snippet " "Quotes" A
\`\`${1}''${0}
endsnippet

snippet nhat "N hat" A
\\hat{\mathbf{n}}
endsnippet

snippet c2c "C to C" wA
\\mathbb{C} \rightarrow \mathbb{C}
endsnippet

snippet balign "Math align" bA
\\begin{align*}
$1
\end{align*}
$0
endsnippet

snippet mbar "math bar" A
\\bar{$1} $0
endsnippet

snippet inflim "infinite limit" A
\\lim_{$1 \rightarrow \infty} $0
endsnippet

snippet w/o "Without" wA
\\backslash 
endsnippet

snippet pxdiv "x pdiv" wA
\\frac{\partial \mathbf{x}}{\partial $1} $0
endsnippet
